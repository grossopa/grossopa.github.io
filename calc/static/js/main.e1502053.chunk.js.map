{"version":3,"sources":["calc/consts.js","model/CompositeFormula.js","model/Operator.js","util/Random.js","model/SimpleFormula.js","service/SimpleGen.js","service/IteratedGen.js","calc/actions.js","calc/view/HeaderView.js","calc/view/QuestionTitleView.js","calc/view/QuestionView.js","app/reducers.js","calc/reducer.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_SETTINGS","GENERATE_QUESTIONS","CompositeFormula","answer","children","this","formula","unshift","fillBlank","blank","randomBlank","parseInt","Math","floor","random","length","arr","push","left","i","child","operator","value","right","join","Operator","operatorStr","calcFunction","calc","ADD","l","r","MINUS","values","integer","min","max","select","SimpleFormula","toDisplayStringNoAnswer","SimpleGen","generateAdd","answerMin","answerMax","leftMin","Random","generateMinus","leftMax","IteratedGen","generator","generate","round","operators","remain","result","selectedOperator","updateSettings","newValue","type","Consts","getQueryParamsUrl","questionType","rangeMin","rangeMax","numberCount","count","OnLoad","dispatch","useDispatch","useEffect","search","kvarr","replace","split","temparr","actions","window","location","HeaderView","history","useHistory","useSelector","state","calcReducer","className","onChange","event","val","target","onClick","iteratedGen","questions","index","toDisplayString","QuestionTitleView","QuestionView","map","q","rootReducer","combineReducers","action","logger","createLogger","store","createStore","reducer","applyMiddleware","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1502053.chunk.js","sourcesContent":["export const UPDATE_SETTINGS = 'UPDATE_SETTINGS'\r\nexport const GENERATE_QUESTIONS = 'GENERATE_QUESTIONS'","export default class CompositeFormula {\r\n    \r\n    children = []\r\n    answer\r\n    constructor(answer) {\r\n        this.answer = answer\r\n    }\r\n\r\n    unshift(formula) {\r\n        this.children.unshift(formula)\r\n    }\r\n\r\n    toDisplayString(fillBlank) {\r\n        let blank = '___'\r\n        let randomBlank = -1\r\n        if (fillBlank) {\r\n            randomBlank = parseInt(Math.floor(Math.random() * (this.children.length + 2)))\r\n        }\r\n\r\n        let arr = []\r\n        arr.push(randomBlank === 0 ? blank : this.children[0].left)\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            let child = this.children[i]\r\n            arr.push(child.operator.value)\r\n            arr.push(randomBlank === i + 1 ? blank : child.right)\r\n        }\r\n        \r\n        arr.push('=')\r\n        arr.push(randomBlank === this.children.length + 1 ? blank : this.answer)\r\n        return arr.join('');\r\n    }\r\n    \r\n}","class Operator {\r\n    value\r\n    calc\r\n    constructor(operatorStr, calcFunction) {\r\n        this.value = operatorStr\r\n        this.calc = calcFunction\r\n    }\r\n}\r\n\r\nexport const ADD   = new Operator('+', (l, r) => l + r)\r\nexport const MINUS = new Operator('−', (l, r) => l - r)\r\nexport const values = [ADD, MINUS]","export function integer(min, max) {\r\n    return parseInt(min + Math.floor(Math.random() * (max - min)))\r\n}\r\n\r\nexport function select(arr) {\r\n    return arr[integer(0, arr.length)]\r\n}","export default class SimpleFormula {\r\n    left\r\n    right\r\n    operator\r\n    answer\r\n\r\n    constructor(left, operator, right, answer) {\r\n        this.left = left\r\n        this.operator = operator\r\n        this.right = right\r\n        this.answer = answer\r\n    }\r\n\r\n    toDisplayString() {\r\n        return this.toDisplayStringNoAnswer() + ` = ${this.answer}`\r\n    }\r\n\r\n    toDisplayStringNoAnswer() {\r\n        return `${this.left} ${this.operator.value} ${this.right}`\r\n    }\r\n    \r\n}","import * as Random from 'util/Random.js'\r\nimport SimpleFormula from 'model/SimpleFormula'\r\nimport * as Operator from 'model/Operator'\r\n\r\nexport default class SimpleGen {\r\n\r\n    generateAdd = (answerMin, answerMax, leftMin) => {\r\n        let answer = Random.integer(answerMin, answerMax)\r\n        let left = Random.integer(leftMin, answer)\r\n        return new SimpleFormula(left, Operator.ADD, answer - left, answer)\r\n    }\r\n\r\n    generateMinus = (answerMin, answerMax, leftMax) => {\r\n        let answer = Random.integer(answerMin, answerMax)\r\n        let left = Random.integer(answer, leftMax)\r\n        return new SimpleFormula(left, Operator.MINUS, left - answer, answer)\r\n    }\r\n    \r\n}\r\n","import CompositeFormula from 'model/CompositeFormula';\r\nimport * as Operator from 'model/Operator';\r\nimport * as Random from 'util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\n\r\nexport default class IteratedGen {\r\n\r\n    generator = new SimpleGen();\r\n\r\n    generate = (min, max, round, operators = Operator.values) => {\r\n        let answer = Random.integer(min, max)\r\n        let remain = answer\r\n        let result = new CompositeFormula(answer) \r\n        for (let i = 0; i < round; i++) {\r\n            let selectedOperator = Random.select(operators)\r\n            var formula\r\n            if (selectedOperator === Operator.ADD) {\r\n                formula = this.generator.generateAdd(remain, remain, min)\r\n            } else if (selectedOperator === Operator.MINUS) {\r\n                formula = this.generator.generateMinus(remain, remain, max)\r\n            }\r\n            \r\n            result.unshift(formula)\r\n            remain = formula.left\r\n        }\r\n\r\n        return result\r\n    }\r\n    \r\n}\r\n","import * as Consts from 'calc/consts'\r\nimport IteratedGen from 'service/IteratedGen';\r\nimport * as Operator from 'model/Operator';\r\n\r\nexport const initSettingsFromLocationSearch = search => {\r\n    let kvarr = search.replace('?', '').split('&');\r\n    var newValue = {}\r\n    for (let i = 0; i < kvarr.length; i++) {\r\n        let temparr = kvarr[i].split('=');\r\n        if (temparr.length > 1) {\r\n            newValue[temparr[0]] = parseInt(temparr[1])\r\n        }\r\n    }\r\n    return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const updateSettings = (newValue) => {\r\n    return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const generateQuestions = (questionType, rangeMin, rangeMax, numberCount, count) => {\r\n    const operators = []\r\n    if ((questionType & 0x01) !== 0) {\r\n        operators.push(Operator.ADD)\r\n    }\r\n    if ((questionType & 0x10) !== 0) {\r\n        operators.push(Operator.MINUS)\r\n    }\r\n\r\n    const iteratedGen = new IteratedGen();\r\n    const questions = []\r\n    for (let i = 0; i < count; i++) {\r\n        let index = parseInt(i / 3)\r\n        if (i % 3 === 0) {\r\n            questions[index] = []\r\n        }\r\n        questions[index].push(iteratedGen.generate(rangeMin, rangeMax, numberCount - 1, operators).toDisplayString(true))\r\n    }\r\n    return { type: Consts.GENERATE_QUESTIONS, questions: questions }\r\n}","import * as actions from 'calc/actions';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './HeaderView.css'\r\n\r\nconst getQueryParamsUrl = (questionType, rangeMin, rangeMax, numberCount, count) => {\r\n    return `?questionType=${questionType}&rangeMin=${rangeMin}&rangeMax=${rangeMax}&numberCount=${numberCount}&count=${count}`\r\n}\r\n\r\nfunction OnLoad() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(actions.initSettingsFromLocationSearch(window.location.search))\r\n    }, [])\r\n    return null;\r\n}\r\n\r\nfunction HeaderView() {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const questionType = useSelector(state => state.calcReducer.questionType)\r\n    const rangeMin = useSelector(state => state.calcReducer.rangeMin)\r\n    const rangeMax = useSelector(state => state.calcReducer.rangeMax)\r\n    const numberCount = useSelector(state => state.calcReducer.numberCount)\r\n    const count = useSelector(state => state.calcReducer.count)\r\n\r\n    return (\r\n        <section className=\"options-cont\">\r\n            <OnLoad />\r\n            <h1>小学数学计算题生成器</h1>\r\n            <table className=\"options-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <label>题型</label>\r\n                            <select value={questionType}\r\n                                onChange={event => {\r\n                                    const val = parseInt(event.target.value)\r\n                                    dispatch(actions.updateSettings({ questionType: val }))\r\n                                    history.push(getQueryParamsUrl(val, rangeMin, rangeMax, numberCount, count))\r\n                                }}>\r\n                                <option value={0}>请选择...</option>\r\n                                <option value={0x01}>仅加法</option>\r\n                                <option value={0x10}>仅减法</option>\r\n                                <option value={0x11}>加减法</option>\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <label>数字个数</label>\r\n                            <select value={numberCount} onChange={event => {\r\n                                const val = parseInt(event.target.value)\r\n                                dispatch(actions.updateSettings({ numberCount: val }))\r\n                                history.push(getQueryParamsUrl(questionType, rangeMin, rangeMax, val, count))\r\n                            }} >\r\n                                <option value={2}>2 (a + b = z)</option>\r\n                                <option value={3}>3 (a + b + c = z)</option>\r\n                                <option value={4}>4 (a + b + c + d = z)</option>\r\n                                <option value={5}>5 (a + b + c + d + e = z)</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <label>数值范围</label>\r\n                            <input type=\"number\" min={-100000} max={rangeMax - 1} value={rangeMin}\r\n                                onChange={event => {\r\n                                    const val = parseInt(event.target.value)\r\n                                    dispatch(actions.updateSettings({ rangeMin: val }))\r\n                                    history.push(getQueryParamsUrl(questionType, val, rangeMax, numberCount, count))\r\n                                }} />\r\n                            <span>~</span>\r\n                            <input type=\"number\" min={rangeMin} max={100000} value={rangeMax}\r\n                                onChange={event => {\r\n                                    const val = parseInt(event.target.value)\r\n                                    dispatch(actions.updateSettings({ rangeMax: val }))\r\n                                    history.push(getQueryParamsUrl(questionType, rangeMin, val, numberCount, count))\r\n                                }} />\r\n                        </td>\r\n                        <td>\r\n                            <label>题目数量</label>\r\n                            <input type=\"text\" min={0} max={2000}\r\n                                onChange={event => {\r\n                                    const val = parseInt(event.target.value)\r\n                                    dispatch(actions.updateSettings({ count: val }))\r\n                                    history.push(getQueryParamsUrl(questionType, rangeMin, rangeMax, numberCount, val))\r\n                                }\r\n                                } value={count} />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <button className=\"gen-button\" onClick={() => dispatch(actions.generateQuestions(questionType, rangeMin, rangeMax, numberCount, count))}>生成</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default HeaderView","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionTitleView.css'\r\n\r\nfunction QuestionTitleView() {\r\n    const count = useSelector(state => state.calcReducer.count)\r\n\r\n    return (\r\n        <section className='question-title-cont'>\r\n            <h2>小学数学计算题&nbsp;&nbsp;(共{count}题）</h2>\r\n            <h3>班级：<span className=\"question-title-underscore\" />姓名：<span className=\"question-title-underscore\" />学号：<span className=\"question-title-underscore\" /></h3>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default QuestionTitleView\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionView.css'\r\n\r\nfunction QuestionView() {\r\n    const questions = useSelector(state => state.calcReducer.questions)\r\n\r\n    return (\r\n        <section className='question-cont'>\r\n            <table className='question-table'>\r\n                <tbody>\r\n                    {questions && questions.map(q =>\r\n                        <tr key={q[0] + q[1] + q[2]} className='question-table-tr'>\r\n                            <td className='question-table-td'>{q[0]}</td>\r\n                            <td className='question-table-td'>{q[1]}</td>\r\n                            <td className='question-table-td'>{q[2]}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default QuestionView\r\n","import { calcReducer } from 'calc/reducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    calcReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import * as Consts from 'calc/consts'\r\n\r\nexport const calcReducer = (state = {\r\n    questionType: 1,\r\n    rangeMin: 0,\r\n    rangeMax: 20,\r\n    numberCount: 2,\r\n    count: 50\r\n}, action) => {\r\n    switch (action.type) {\r\n        case Consts.UPDATE_SETTINGS:\r\n            state = { ...state, ...action.value }\r\n            break;\r\n        case Consts.GENERATE_QUESTIONS:\r\n            state = { ...state, questions: action.questions }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","import HeaderView from 'calc/view/HeaderView';\r\nimport QuestionTitleView from 'calc/view/QuestionTitleView';\r\nimport QuestionView from 'calc/view/QuestionView';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router\r\n} from \"react-router-dom\";\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport './App.css';\r\nimport reducer from './app/reducers';\r\n\r\nconst logger = createLogger({});\r\n\r\nconst store = createStore(reducer, applyMiddleware(logger))\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <HeaderView />\r\n          <QuestionTitleView />\r\n          <QuestionView />\r\n        </div>\r\n      </Provider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}