{"version":3,"sources":["calgen/calc/consts.js","calgen/app/reducers.js","calgen/calc/reducer.js","calgen/util/Random.js","calgen/model/BlankPosition.js","calgen/model/CompositeFormula.js","calgen/model/Operator.js","calgen/model/SimpleFormula.js","calgen/service/SimpleGen.js","calgen/service/IteratedGen.js","calgen/model/TreeFormula.js","calgen/service/TreeGen.js","calgen/calc/actions.js","calgen/calc/view/HeaderView.js","calgen/calc/view/QuestionTitleView.js","calgen/calc/view/QuestionView.js","calgen/calc/view/QuickBarView.js","calgen/layout/view/LayoutHeaderView.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_SETTINGS","GENERATE_QUESTIONS","rootReducer","combineReducers","calcReducer","state","questionType","rangeMin","rangeMax","numberCount","count","blank","brackets","action","type","Consts","value","questions","integer","min","max","parseInt","Math","floor","random","select","arr","length","selectAndRemove","idx","selected","rest","slice","concat","BlankPosition","randomPosition","this","values","numsize","Random","valueOf","find","item","CompositeFormula","answer","children","formula","unshift","fillBlank","randomBlank","push","left","i","child","operator","right","join","Operator","operatorStr","calcFunction","calc","ADD","l","r","MINUS","SimpleFormula","toDisplayStringNoAnswer","SimpleGen","generateAdd","answerMin","answerMax","leftMin","generateMinus","leftMax","IteratedGen","generator","generate","round","operators","remain","result","selectedOperator","TreeFormula","leftNode","getNumberCount","rightNode","iterToDisplayString","blankIndexRef","withAnswer","blankStr","answerStr","TreeGen","leafNodes","rootNode","node","currentNode","selectResult","choseNode","newNode","updateSettings","newValue","generateQuestions","iteratedGen","index","toDisplayString","getQueryParamsUrl","params","OnLoad","dispatch","useDispatch","useEffect","search","kvarr","replace","split","temparr","actions","window","location","HeaderView","history","useHistory","useSelector","isNaN","settings","labelProps","xs","container","direction","justify","fieldProps","doUpdate","newVal","Grid","className","Typography","variant","component","align","spacing","alignItems","style","width","FormLabel","RadioGroup","row","onChange","event","target","FormControlLabel","control","Radio","color","label","Select","MenuItem","TextField","InputLabelProps","shrink","inputProps","textAlign","Switch","checked","onClick","QuestionTitleView","QuestionView","map","q","QuickBarView","options","b","LayoutHeaderView","AppBar","position","Toolbar","IconButton","edge","aria-label","logger","createLogger","store","createStore","reducer","applyMiddleware","App","CssBaseline","Container","maxWidth","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9e2c7c1.chunk.js","sourcesContent":["export const UPDATE_SETTINGS = 'UPDATE_SETTINGS'\r\nexport const GENERATE_QUESTIONS = 'GENERATE_QUESTIONS'","import { calcReducer } from 'calgen/calc/reducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n  calcReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import * as Consts from 'calgen/calc/consts'\r\n\r\nexport const calcReducer = (state = {\r\n  questionType: 1,\r\n  rangeMin: 0,\r\n  rangeMax: 20,\r\n  numberCount: 2,\r\n  count: 50,\r\n  blank: 2,\r\n  brackets: 0\r\n}, action) => {\r\n    switch (action.type) {\r\n        case Consts.UPDATE_SETTINGS:\r\n            state = { ...state, ...action.value }\r\n            break;\r\n        case Consts.GENERATE_QUESTIONS:\r\n            state = { ...state, questions: action.questions }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","export function integer(min, max) {\r\n  return parseInt(min + Math.floor(Math.random() * (max - min)))\r\n}\r\n\r\nexport function select(arr) {\r\n  return arr[integer(0, arr.length)]\r\n}\r\n\r\nexport function selectAndRemove(arr) {\r\n  let idx = integer(0, arr.length)\r\n  return {selected : arr[idx], rest: arr.slice(0, idx).concat(arr.slice(idx + 1, arr.length))}\r\n}","import * as Random from 'calgen/util/Random'\r\n\r\n/**\r\n * where the blank position would be.\r\n */\r\nclass BlankPosition {\r\n  value\r\n  randomPosition\r\n\r\n  constructor(value, randomPosition) {\r\n    this.value = value\r\n    this.randomPosition = randomPosition\r\n  }\r\n}\r\n\r\nexport const LEFT = new BlankPosition(1, numsize => Random.integer(0, numsize))\r\nexport const RIGHT = new BlankPosition(2, numsize => numsize)\r\nexport const BOTH = new BlankPosition(3, numsize => Random.integer(0, numsize + 1))\r\nexport const values = [LEFT, RIGHT, BOTH]\r\nexport const valueOf = value => values.find(item => item.value === value)","import * as BlankPosition from 'calgen/model/BlankPosition'\r\n\r\nexport default class CompositeFormula {\r\n\r\n  children = []\r\n  answer\r\n  constructor(answer) {\r\n    this.answer = answer\r\n  }\r\n\r\n  unshift(formula) {\r\n    this.children.unshift(formula)\r\n  }\r\n\r\n  toDisplayString(fillBlank) {\r\n    let blank = '___'\r\n    let randomBlank = BlankPosition.valueOf(fillBlank).randomPosition(this.children.length + 1)\r\n    \r\n    let arr = []\r\n    arr.push(randomBlank === 0 ? blank : this.children[0].left)\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      let child = this.children[i]\r\n      arr.push(child.operator.value)\r\n      arr.push(randomBlank === i + 1 ? blank : child.right)\r\n    }\r\n\r\n    arr.push('=')\r\n    arr.push(randomBlank === this.children.length + 1 ? blank : this.answer)\r\n    return arr.join('');\r\n  }\r\n\r\n}","class Operator {\r\n  value\r\n  calc\r\n  constructor(operatorStr, calcFunction) {\r\n    this.value = operatorStr\r\n    this.calc = calcFunction\r\n  }\r\n\r\n  toString() {\r\n    return `Operator [${this.value}]`\r\n  }\r\n}\r\n\r\nexport const ADD = new Operator('+', (l, r) => l + r)\r\nexport const MINUS = new Operator('−', (l, r) => l - r)\r\nexport const values = [ADD, MINUS]","export default class SimpleFormula {\r\n  left\r\n  right\r\n  operator\r\n  answer\r\n\r\n  constructor(left, operator, right, answer) {\r\n    this.left = left\r\n    this.operator = operator\r\n    this.right = right\r\n    this.answer = answer\r\n  }\r\n\r\n  toDisplayString() {\r\n    return this.toDisplayStringNoAnswer() + ` = ${this.answer}`\r\n  }\r\n\r\n  toDisplayStringNoAnswer() {\r\n    return `${this.left} ${this.operator.value} ${this.right}`\r\n  }\r\n\r\n}","import * as Random from 'calgen/util/Random.js'\r\nimport SimpleFormula from 'calgen/model/SimpleFormula'\r\nimport * as Operator from 'calgen/model/Operator'\r\n\r\nexport default class SimpleGen {\r\n\r\n  generateAdd = (answerMin, answerMax, leftMin) => {\r\n    let answer = Random.integer(answerMin, answerMax)\r\n    let left = Random.integer(leftMin, answer)\r\n    return new SimpleFormula(left, Operator.ADD, answer - left, answer)\r\n  }\r\n\r\n  generateMinus = (answerMin, answerMax, leftMax) => {\r\n    let answer = Random.integer(answerMin, answerMax)\r\n    let left = Random.integer(answer, leftMax)\r\n    return new SimpleFormula(left, Operator.MINUS, left - answer, answer)\r\n  }\r\n\r\n}\r\n","import CompositeFormula from 'calgen/model/CompositeFormula';\r\nimport * as Operator from 'calgen/model/Operator';\r\nimport * as Random from 'calgen/util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\n\r\nexport default class IteratedGen {\r\n\r\n  generator = new SimpleGen();\r\n\r\n  generate = (min, max, round, operators = Operator.values) => {\r\n    let answer = Random.integer(min, max)\r\n    let remain = answer\r\n    let result = new CompositeFormula(answer)\r\n    for (let i = 0; i < round; i++) {\r\n      let selectedOperator = Random.select(operators)\r\n      var formula\r\n      if (selectedOperator === Operator.ADD) {\r\n        formula = this.generator.generateAdd(remain, remain, min)\r\n      } else if (selectedOperator === Operator.MINUS) {\r\n        formula = this.generator.generateMinus(remain, remain, max)\r\n      }\r\n\r\n      result.unshift(formula)\r\n      remain = formula.left\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n}\r\n","import * as BlankPosition from 'calgen/model/BlankPosition'\r\n\r\nexport default class TreeFormula {\r\n  leftNode\r\n  rightNode\r\n  formula\r\n\r\n  getNumberCount() {\r\n    let count = 0\r\n    if (this.leftNode) {\r\n      count = this.leftNode.getNumberCount()\r\n    } else {\r\n      count = 1\r\n    }\r\n    if (this.rightNode) {\r\n      count += this.rightNode.getNumberCount()\r\n    } else {\r\n      count += 1\r\n    }\r\n    return count\r\n  }\r\n\r\n  toDisplayString(fillBlank) {\r\n    let numberCount = this.getNumberCount()\r\n    let randomBlank = BlankPosition.valueOf(fillBlank).randomPosition(numberCount);\r\n    return this.iterToDisplayString([randomBlank + 1], true)\r\n  }\r\n\r\n  iterToDisplayString(blankIndexRef, withAnswer) {\r\n    let left = ''\r\n    let right = ''\r\n    let blankStr = '___'\r\n\r\n    if (this.leftNode && this.leftNode.formula) {\r\n      left = this.leftNode.iterToDisplayString(blankIndexRef, false)\r\n    } else {\r\n      blankIndexRef[0]--\r\n      if (blankIndexRef[0] === 0) {\r\n        left = blankStr\r\n      } else {\r\n        left = this.formula.left\r\n      }\r\n    }\r\n\r\n    if (this.rightNode && this.rightNode.formula) {\r\n      right = `(${this.rightNode.iterToDisplayString(blankIndexRef, false)})`\r\n    } else {\r\n      blankIndexRef[0]--\r\n      if (blankIndexRef[0] === 0) {\r\n        right = blankStr\r\n      } else {\r\n        right = this.formula.right\r\n      }\r\n    }\r\n\r\n    let answerStr = ''\r\n    if (withAnswer) {\r\n      if (blankIndexRef[0] <= 0) {\r\n        answerStr = `=${this.formula.answer}`\r\n      } else {\r\n        answerStr = `=${blankStr}`\r\n      }\r\n    }\r\n\r\n    return `${left}${this.formula.operator.value}${right}${answerStr}`\r\n  }\r\n\r\n}\r\n","import TreeFormula from 'calgen/model/TreeFormula';\r\nimport * as Operator from 'calgen/model/Operator';\r\nimport * as Random from 'calgen/util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\n\r\nexport default class TreeGen {\r\n\r\n  generator = new SimpleGen()\r\n\r\n  generate = (min, max, round, operators = Operator.values) => {\r\n    let answer = Random.integer(min, max)\r\n    let remain = answer\r\n\r\n    let leafNodes = []\r\n\r\n    let rootNode = new TreeFormula()\r\n    leafNodes.push({ node: rootNode, child: 0 }, { node: rootNode, child: 1 })\r\n\r\n    let currentNode = rootNode\r\n    for (let i = 0; i < round; i++) {\r\n      let selectedOperator = Random.select(operators)\r\n      var formula\r\n      if (selectedOperator === Operator.ADD) {\r\n        formula = this.generator.generateAdd(remain, remain, min)\r\n      } else if (selectedOperator === Operator.MINUS) {\r\n        formula = this.generator.generateMinus(remain, remain, max)\r\n      }\r\n\r\n      currentNode.formula = formula\r\n      let selectResult = Random.selectAndRemove(leafNodes)\r\n      let choseNode = selectResult.selected\r\n      leafNodes = selectResult.rest\r\n\r\n      let newNode = new TreeFormula()\r\n\r\n      if (choseNode.child === 0) {\r\n        choseNode.node.leftNode = newNode\r\n        remain = choseNode.node.formula.left\r\n      } else {\r\n        choseNode.node.rightNode = newNode\r\n        remain = choseNode.node.formula.right\r\n      }\r\n\r\n      currentNode = newNode\r\n      leafNodes.push({ node: newNode, child: 0 }, { node: newNode, child: 1 })\r\n    }\r\n\r\n    return rootNode\r\n  }\r\n}","import * as Consts from 'calgen/calc/consts'\r\nimport IteratedGen from 'calgen/service/IteratedGen'\r\nimport TreeGen from 'calgen/service/TreeGen'\r\nimport * as Operator from 'calgen/model/Operator'\r\n\r\nexport const initSettingsFromLocationSearch = search => {\r\n  let kvarr = search.replace('?', '').split('&');\r\n  var newValue = {}\r\n  for (let i = 0; i < kvarr.length; i++) {\r\n    let temparr = kvarr[i].split('=');\r\n    if (temparr.length > 1) {\r\n      newValue[temparr[0]] = parseInt(temparr[1])\r\n    }\r\n  }\r\n  return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const updateSettings = (newValue) => {\r\n  return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const generateQuestions = (questionType, rangeMin, rangeMax, numberCount, count, blank, brackets) => {\r\n  const operators = []\r\n  if ((questionType & 0x01) !== 0) {\r\n    operators.push(Operator.ADD)\r\n  }\r\n  if ((questionType & 0x10) !== 0) {\r\n    operators.push(Operator.MINUS)\r\n  }\r\n\r\n  const iteratedGen = brackets === 1 ? new TreeGen() : new IteratedGen();\r\n  const questions = []\r\n  for (let i = 0; i < count; i++) {\r\n    let index = parseInt(i / 3)\r\n    if (i % 3 === 0) {\r\n      questions[index] = []\r\n    }\r\n    questions[index].push(iteratedGen.generate(rangeMin, rangeMax, numberCount - 1, operators).toDisplayString(blank))\r\n  }\r\n  return { type: Consts.GENERATE_QUESTIONS, questions: questions }\r\n}\r\n\r\nexport const getQueryParamsUrl = params => {\r\n  const { questionType, rangeMin, rangeMax, numberCount, count, blank, brackets } = params\r\n  return `?questionType=${questionType}&rangeMin=${rangeMin}&rangeMax=${rangeMax}&numberCount=${numberCount}&count=${count}&blank=${blank}&brackets=${brackets}`\r\n}","import { FormControlLabel, FormLabel, Grid, MenuItem, Radio, RadioGroup, Switch, TextField, Typography } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as actions from 'calgen/calc/actions';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './HeaderView.css';\r\n\r\nfunction OnLoad() {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(actions.initSettingsFromLocationSearch(window.location.search))\r\n  }, [dispatch])\r\n  return null;\r\n}\r\n\r\nfunction HeaderView() {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const questionType = useSelector(state => state.calcReducer.questionType)\r\n  let rangeMin = useSelector(state => state.calcReducer.rangeMin)\r\n  rangeMin = isNaN(rangeMin) ? '' : rangeMin\r\n  let rangeMax = useSelector(state => state.calcReducer.rangeMax)\r\n  rangeMax = isNaN(rangeMax) ? '' : rangeMax\r\n  const numberCount = useSelector(state => state.calcReducer.numberCount)\r\n  const count = useSelector(state => state.calcReducer.count)\r\n  const blank = useSelector(state => state.calcReducer.blank)\r\n  const brackets = useSelector(state => state.calcReducer.brackets)\r\n\r\n  const settings = {\r\n    questionType: questionType,\r\n    rangeMin: rangeMin,\r\n    rangeMax: rangeMax,\r\n    numberCount: numberCount,\r\n    count: count,\r\n    blank: blank,\r\n    brackets: brackets\r\n  }\r\n\r\n  const labelProps = { item: true, xs: 2, container: true, direction: \"row\", justify: \"flex-end\" }\r\n  const fieldProps = { item: true, xs: 4, container: true, direction: \"row\", justify: \"flex-start\" }\r\n\r\n  const doUpdate = newVal => {\r\n    dispatch(actions.updateSettings(newVal))\r\n    history.push(actions.getQueryParamsUrl({ ...settings, ...newVal }))\r\n  }\r\n\r\n  return (\r\n    <Grid className=\"noprint\" container justify=\"center\">\r\n      <OnLoad />\r\n      <Typography variant=\"h4\" component=\"h1\" align=\"center\">小学数学计算题生成器</Typography>\r\n      <Grid container spacing={3} justify=\"center\" alignItems=\"center\" style={{ width: '90%' }}>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>题型</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <RadioGroup row value={questionType} onChange={event => doUpdate({ questionType: parseInt(event.target.value) })}>\r\n            <FormControlLabel value={0x01} control={<Radio color=\"primary\" />} label=\"仅加法\" />\r\n            <FormControlLabel value={0x10} control={<Radio color=\"primary\" />} label=\"仅减法\" />\r\n            <FormControlLabel value={0x11} control={<Radio color=\"primary\" />} label=\"加法+减法\" />\r\n          </RadioGroup>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>数字个数</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <Select value={numberCount} onChange={event => doUpdate({ numberCount: parseInt(event.target.value) })} >\r\n            <MenuItem value={2}>2 (a + b = z)</MenuItem>\r\n            <MenuItem value={3}>3 (a + b + c = z)</MenuItem>\r\n            <MenuItem value={4}>4 (a + b + c + d = z)</MenuItem>\r\n            <MenuItem value={5}>5 (a + b + c + d + e = z)</MenuItem>\r\n          </Select>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>数值范围</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={-100000} max={rangeMax - 1} value={rangeMin}\r\n            onChange={event => doUpdate({ rangeMin: parseInt(event.target.value) })} />\r\n          <span className=\"calc-range-char\">~</span>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={rangeMin} max={100000} value={rangeMax}\r\n            onChange={event => doUpdate({ rangeMax: parseInt(event.target.value) })} />\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>题目数量</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={1} max={2000} value={count}\r\n            onChange={event => doUpdate({ count: Math.min(2000, parseInt(event.target.value) || 1) })} />\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>填空位置</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <RadioGroup row value={blank} onChange={event => doUpdate({ blank: parseInt(event.target.value) })}>\r\n            <FormControlLabel value={1} control={<Radio color=\"primary\" />} label=\"仅右边\" />\r\n            <FormControlLabel value={2} control={<Radio color=\"primary\" />} label=\"仅左边\" />\r\n            <FormControlLabel value={3} control={<Radio color=\"primary\" />} label=\"两边\" />\r\n          </RadioGroup>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>包含括号</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <FormControlLabel control={<Switch color=\"primary\" checked={brackets === 1} onChange={event => doUpdate({ brackets: event.target.checked ? 1 : 0 })} />} />\r\n        </Grid>\r\n        <Grid item xs={12} container justify=\"center\">\r\n          <button className=\"gen-button\" onClick={() => dispatch(actions.generateQuestions(questionType, rangeMin, rangeMax, numberCount, count, blank, brackets))}>生成</button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default HeaderView","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionTitleView.css'\r\n\r\nfunction QuestionTitleView() {\r\n  const count = useSelector(state => state.calcReducer.count)\r\n\r\n  return (\r\n    <section className='question-title-cont'>\r\n      <h2>小学数学计算题&nbsp;&nbsp;(共{count}题）</h2>\r\n      <h3>\r\n        班级：<span className=\"question-title-underscore\" />\r\n        姓名：<span className=\"question-title-underscore\" />\r\n        学号：<span className=\"question-title-underscore\" />\r\n      </h3>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuestionTitleView\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionView.css'\r\n\r\nfunction QuestionView() {\r\n  const questions = useSelector(state => state.calcReducer.questions)\r\n\r\n  return (\r\n    <section className='question-cont'>\r\n      <table className='question-table'>\r\n        <tbody>\r\n          {questions && questions.map(q =>\r\n            <tr key={q[0] + q[1] + q[2]} className='question-table-tr'>\r\n              <td className='question-table-td'>{q[0]}</td>\r\n              <td className='question-table-td'>{q[1]}</td>\r\n              <td className='question-table-td'>{q[2]}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuestionView\r\n","import * as actions from 'calgen/calc/actions';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './QuickBarView.css';\r\n\r\nfunction QuickBarView() {\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const buttons = [\r\n    { label: \"10以内加法\", options: { questionType: 1, rangeMin: 0, rangeMax: 10, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"10以内减法\", options: { questionType: 16, rangeMin: 0, rangeMax: 10, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加法\", options: { questionType: 1, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内减法\", options: { questionType: 16, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加减法\", options: { questionType: 17, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加减法(两边）\", options: { questionType: 17, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 3, brackets: 0 } },\r\n    { label: \"100以内加减法\", options: { questionType: 17, rangeMin: 0, rangeMax: 100, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"100以内加减法(两边）\", options: { questionType: 17, rangeMin: 0, rangeMax: 100, numberCount: 2, count: 50, blank: 3, brackets: 0 } }\r\n  ]\r\n  return (\r\n    <section className='quickbar-cont noprint'>\r\n      {buttons.map(b =>\r\n        <button key={b.label} className='quickbar-btn' onClick={() => {\r\n          dispatch(actions.updateSettings(b.options))\r\n          history.push(actions.getQueryParamsUrl(b.options))\r\n          dispatch(actions.generateQuestions(b.options.questionType, b.options.rangeMin, b.options.rangeMax,\r\n            b.options.numberCount, b.options.count, b.options.blank, b.options.brackets))\r\n        }}>{b.label}</button>\r\n      )}\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuickBarView\r\n","import AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport React from 'react';\r\nimport './LayoutHeaderView.css';\r\n\r\nfunction LayoutHeaderView() {\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"noprint\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\">\r\n          News\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default LayoutHeaderView\r\n\r\n\r\n\r\n","import { Container } from '@material-ui/core';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport reducer from 'calgen/app/reducers';\r\nimport HeaderView from 'calgen/calc/view/HeaderView';\r\nimport QuestionTitleView from 'calgen/calc/view/QuestionTitleView';\r\nimport QuestionView from 'calgen/calc/view/QuestionView';\r\nimport QuickBarView from 'calgen/calc/view/QuickBarView';\r\nimport LayoutHeaderView from 'calgen/layout/view/LayoutHeaderView';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport './App.css';\r\n\r\n\r\nconst logger = createLogger({});\r\n\r\nconst store = createStore(reducer, applyMiddleware(logger))\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <CssBaseline />\r\n          <LayoutHeaderView />\r\n          <Container maxWidth=\"lg\" className=\"main-cont\">\r\n            <HeaderView />\r\n            <QuickBarView />\r\n            <Paper className=\"question-pager\">\r\n              <QuestionTitleView />\r\n              <QuestionView />\r\n            </Paper>\r\n          </Container>\r\n        </div>\r\n      </Provider>\r\n    </Router >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}