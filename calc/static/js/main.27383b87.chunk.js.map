{"version":3,"sources":["calgen/calc/consts.js","calgen/layout/consts.js","calgen/app/reducers.js","calgen/calc/reducer.js","calgen/layout/reducers.js","calgen/util/Random.js","calgen/model/BlankPosition.js","calgen/model/CompositeFormula.js","calgen/model/Operator.js","calgen/model/SimpleFormula.js","calgen/service/SimpleGen.js","calgen/service/IteratedGen.js","calgen/model/TreeFormula.js","calgen/service/TreeGen.js","calgen/service/DigitsBasedIteratedGen.js","calgen/calc/actions.js","calgen/calc/view/HeaderView.js","calgen/calc/view/QuestionTitleView.js","calgen/calc/view/QuestionView.js","calgen/calc/view/QuickBarView.js","calgen/calc/index.js","calgen/calc-multi/index.js","calgen/layout/view/LayoutContentView.js","calgen/layout/view/LayoutHeaderView.js","calgen/layout/actions.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_SETTINGS","GENERATE_QUESTIONS","LAYOUT_SWITCH_TAB","TAB_ADDMINUS","TAB_MULTIPLY","rootReducer","combineReducers","calcReducer","state","questionType","rangeMin","rangeMax","numberCount","numberDigits","count","blank","brackets","action","type","Consts","value","length","arr","i","push","questions","layoutReducers","selectedTab","integer","min","max","parseInt","Math","floor","random","select","selectAndRemove","idx","selected","rest","slice","concat","BlankPosition","randomPosition","this","values","numsize","Random","valueOf","find","item","CompositeFormula","answer","children","formula","unshift","fillBlank","randomBlank","left","child","operator","right","join","Operator","operatorStr","calcFunction","calc","ADD","l","r","MINUS","MULTIPLY","SimpleFormula","toDisplayStringNoAnswer","SimpleGen","generateAdd","answerMin","answerMax","leftMin","generateMinus","leftMax","generateMultiplyWithDigits","leftDigit","rightDigit","pow","IteratedGen","generator","generate","round","operators","remain","result","selectedOperator","TreeFormula","leftNode","getNumberCount","rightNode","iterToDisplayString","blankIndexRef","withAnswer","blankStr","answerStr","TreeGen","leafNodes","rootNode","node","currentNode","generateMultiply","selectResult","choseNode","newNode","DigitsBasedIteratedGen","updateSettings","newValue","generateQuestions","filter","o","index","toDisplayString","getQueryParamsUrl","params","OnLoad","dispatch","useDispatch","useEffect","search","kvarr","replace","split","temparr","actions","window","location","HeaderView","history","useHistory","useSelector","isNaN","settings","labelProps","xs","container","direction","justify","fieldProps","doUpdate","newVal","Grid","className","spacing","alignItems","style","width","FormLabel","RadioGroup","row","onChange","event","target","FormControlLabel","control","Radio","color","label","Select","MenuItem","TextField","InputLabelProps","shrink","inputProps","textAlign","Array","from","_e","marginLeft","Typography","newNumberDigits","Switch","checked","onClick","QuestionTitleView","QuestionView","map","q","QuickBarView","options","b","CalcIndexView","Paper","CalcMultiIndexView","useState","setLeft","setRight","Button","variant","LayoutContentView","LayoutHeaderView","AppBar","position","Toolbar","IconButton","edge","aria-label","Tabs","_event","Tab","logger","createLogger","store","createStore","reducer","applyMiddleware","App","CssBaseline","Container","maxWidth","component","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27383b87.chunk.js","sourcesContent":["export const UPDATE_SETTINGS = 'UPDATE_SETTINGS'\r\nexport const GENERATE_QUESTIONS = 'GENERATE_QUESTIONS'","export const LAYOUT_SWITCH_TAB = 'LAYOUT_SWITCH_TAB'\r\n\r\nexport const TAB_ADDMINUS = 'addMinus'\r\nexport const TAB_MULTIPLY = 'multiply'","import { calcReducers } from 'calgen/calc/reducer'\r\nimport { layoutReducers } from 'calgen/layout/reducers'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n  calcReducer: calcReducers, layoutReducers\r\n})\r\n\r\nexport default rootReducer\r\n","import * as Consts from 'calgen/calc/consts'\r\n\r\nexport const calcReducers = (state = {\r\n  questionType: 1,\r\n  rangeMin: 0,\r\n  rangeMax: 20,\r\n  numberCount: 2,\r\n  numberDigits: [1,1],\r\n  count: 50,\r\n  blank: 2,\r\n  brackets: 0\r\n}, action) => {\r\n    switch (action.type) {\r\n        case Consts.UPDATE_SETTINGS:\r\n            state = { ...state, ...action.value }\r\n            // to align the number digits with number count\r\n            if (state.numberCount !== state.numberDigits.length) {\r\n                var arr = []\r\n                for (let i = 0; i < state.numberCount; i++) {\r\n                    arr.push(state.numberDigits[i] || 1);\r\n                }\r\n                state.numberDigits = arr\r\n            }\r\n            break;\r\n        case Consts.GENERATE_QUESTIONS:\r\n            state = { ...state, questions: action.questions }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","import * as Consts from 'calgen/layout/consts'\r\n\r\nexport const layoutReducers = (state = {\r\n  selectedTab: Consts.TAB_ADDMINUS\r\n}, action) => {\r\n    switch (action.type) {\r\n        case Consts.LAYOUT_SWITCH_TAB:\r\n            state = { ...state, selectedTab : action.value }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","export function integer(min, max) {\r\n  return parseInt(min + Math.floor(Math.random() * (max - min)))\r\n}\r\n\r\nexport function select(arr) {\r\n  return arr[integer(0, arr.length)]\r\n}\r\n\r\nexport function selectAndRemove(arr) {\r\n  let idx = integer(0, arr.length)\r\n  return {selected : arr[idx], rest: arr.slice(0, idx).concat(arr.slice(idx + 1, arr.length))}\r\n}","import * as Random from 'calgen/util/Random'\r\n\r\n/**\r\n * where the blank position would be.\r\n */\r\nclass BlankPosition {\r\n  value\r\n  randomPosition\r\n\r\n  constructor(value, randomPosition) {\r\n    this.value = value\r\n    this.randomPosition = randomPosition\r\n  }\r\n}\r\n\r\nexport const LEFT = new BlankPosition(1, numsize => Random.integer(0, numsize))\r\nexport const RIGHT = new BlankPosition(2, numsize => numsize)\r\nexport const BOTH = new BlankPosition(3, numsize => Random.integer(0, numsize + 1))\r\nexport const values = [LEFT, RIGHT, BOTH]\r\nexport const valueOf = value => values.find(item => item.value === value)","import * as BlankPosition from 'calgen/model/BlankPosition'\r\n\r\nexport default class CompositeFormula {\r\n\r\n  children = []\r\n  answer\r\n  constructor(answer) {\r\n    this.answer = answer\r\n  }\r\n\r\n  unshift(formula) {\r\n    this.children.unshift(formula)\r\n  }\r\n\r\n  push(formula) {\r\n    this.children.push(formula)\r\n  }\r\n\r\n  toDisplayString(fillBlank) {\r\n    let blank = '___'\r\n    let randomBlank = BlankPosition.valueOf(fillBlank).randomPosition(this.children.length + 1)\r\n    \r\n    let arr = []\r\n    arr.push(randomBlank === 0 ? blank : this.children[0].left)\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      let child = this.children[i]\r\n      arr.push(child.operator.value)\r\n      arr.push(randomBlank === i + 1 ? blank : child.right)\r\n    }\r\n\r\n    arr.push('=')\r\n    arr.push(randomBlank === this.children.length + 1 ? blank : this.answer)\r\n    return arr.join('');\r\n  }\r\n\r\n}","class Operator {\r\n  value\r\n  calc\r\n  questionType\r\n  constructor(operatorStr, calcFunction, questionType) {\r\n    this.value = operatorStr\r\n    this.calc = calcFunction\r\n    this.questionType = questionType\r\n  }\r\n\r\n  toString() {\r\n    return `Operator [${this.value}]`\r\n  }\r\n}\r\n\r\nexport const ADD = new Operator('+', (l, r) => l + r, 0x001)\r\nexport const MINUS = new Operator('−', (l, r) => l - r, 0x010)\r\nexport const MULTIPLY = new Operator('*', (l, r) => l * r, 0x100)\r\nexport const values = [ADD, MINUS]\r\n\r\n/**\r\n * Finds the operators from the combined questionType\r\n * \r\n * @param questionType int value between 0x0001 to 0x1000\r\n * @returns the operator array\r\n */\r\nexport const fromQuestionType = questionType => {\r\n  return [ADD, MINUS, MULTIPLY].filter(o => (o.questionType & questionType) !== 0)\r\n}","export default class SimpleFormula {\r\n  left\r\n  right\r\n  operator\r\n  answer\r\n\r\n  constructor(left, operator, right, answer) {\r\n    this.left = left\r\n    this.operator = operator\r\n    this.right = right\r\n    this.answer = answer\r\n  }\r\n\r\n  calculate() {\r\n    return this.operator.calc(this.left, this.right)\r\n  }\r\n\r\n  toDisplayString() {\r\n    return this.toDisplayStringNoAnswer() + ` = ${this.answer}`\r\n  }\r\n\r\n  toDisplayStringNoAnswer() {\r\n    return `${this.left} ${this.operator.value} ${this.right}`\r\n  }\r\n\r\n}","import * as Random from 'calgen/util/Random.js'\r\nimport SimpleFormula from 'calgen/model/SimpleFormula'\r\nimport * as Operator from 'calgen/model/Operator'\r\n\r\nexport default class SimpleGen {\r\n\r\n  generateAdd = (answerMin, answerMax, leftMin) => {\r\n    let answer = Random.integer(answerMin, answerMax)\r\n    let left = Random.integer(leftMin, answer)\r\n    return new SimpleFormula(left, Operator.ADD, answer - left, answer)\r\n  }\r\n\r\n  generateMinus = (answerMin, answerMax, leftMax) => {\r\n    let answer = Random.integer(answerMin, answerMax)\r\n    let left = Random.integer(answer, leftMax)\r\n    return new SimpleFormula(left, Operator.MINUS, left - answer, answer)\r\n  }\r\n\r\n  generateMultiplyWithDigits = (leftDigit, rightDigit) => {\r\n    let left = Random.integer(Math.pow(10, leftDigit), Math.pow(10, leftDigit + 1))\r\n    let right = Random.integer(Math.pow(10, rightDigit), Math.pow(10, rightDigit + 1))\r\n    return new SimpleFormula(left, Operator.MULTIPLY, right, left * right)\r\n  }\r\n\r\n}\r\n","import CompositeFormula from 'calgen/model/CompositeFormula';\r\nimport * as Operator from 'calgen/model/Operator';\r\nimport * as Random from 'calgen/util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\n\r\nexport default class IteratedGen {\r\n\r\n  generator = new SimpleGen();\r\n\r\n  generate = (min, max, round, operators = Operator.values) => {\r\n    let answer = Random.integer(min, max)\r\n    let remain = answer\r\n    let result = new CompositeFormula(answer)\r\n    for (let i = 0; i < round; i++) {\r\n      let selectedOperator = Random.select(operators)\r\n      var formula\r\n      if (selectedOperator === Operator.ADD) {\r\n        formula = this.generator.generateAdd(remain, remain, min)\r\n      } else if (selectedOperator === Operator.MINUS) {\r\n        formula = this.generator.generateMinus(remain, remain, max)\r\n      } else if (selectedOperator === Operator.MULTIPLY) {\r\n        // for multiply we don't care the remaining answer\r\n        formula = this.generator.generateMultiplyWithDigits(min, max)\r\n      }\r\n\r\n      result.unshift(formula)\r\n      remain = formula.left\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n}\r\n","import * as BlankPosition from 'calgen/model/BlankPosition'\r\n\r\nexport default class TreeFormula {\r\n  leftNode\r\n  rightNode\r\n  formula\r\n\r\n  getNumberCount() {\r\n    let count = 0\r\n    if (this.leftNode) {\r\n      count = this.leftNode.getNumberCount()\r\n    } else {\r\n      count = 1\r\n    }\r\n    if (this.rightNode) {\r\n      count += this.rightNode.getNumberCount()\r\n    } else {\r\n      count += 1\r\n    }\r\n    return count\r\n  }\r\n\r\n  toDisplayString(fillBlank) {\r\n    let numberCount = this.getNumberCount()\r\n    let randomBlank = BlankPosition.valueOf(fillBlank).randomPosition(numberCount);\r\n    return this.iterToDisplayString([randomBlank + 1], true)\r\n  }\r\n\r\n  iterToDisplayString(blankIndexRef, withAnswer) {\r\n    let left = ''\r\n    let right = ''\r\n    let blankStr = '___'\r\n\r\n    if (this.leftNode && this.leftNode.formula) {\r\n      left = this.leftNode.iterToDisplayString(blankIndexRef, false)\r\n    } else {\r\n      blankIndexRef[0]--\r\n      if (blankIndexRef[0] === 0) {\r\n        left = blankStr\r\n      } else {\r\n        left = this.formula.left\r\n      }\r\n    }\r\n\r\n    if (this.rightNode && this.rightNode.formula) {\r\n      right = `(${this.rightNode.iterToDisplayString(blankIndexRef, false)})`\r\n    } else {\r\n      blankIndexRef[0]--\r\n      if (blankIndexRef[0] === 0) {\r\n        right = blankStr\r\n      } else {\r\n        right = this.formula.right\r\n      }\r\n    }\r\n\r\n    let answerStr = ''\r\n    if (withAnswer) {\r\n      if (blankIndexRef[0] <= 0) {\r\n        answerStr = `=${this.formula.answer}`\r\n      } else {\r\n        answerStr = `=${blankStr}`\r\n      }\r\n    }\r\n\r\n    return `${left}${this.formula.operator.value}${right}${answerStr}`\r\n  }\r\n\r\n}\r\n","import TreeFormula from 'calgen/model/TreeFormula';\r\nimport * as Operator from 'calgen/model/Operator';\r\nimport * as Random from 'calgen/util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\n\r\nexport default class TreeGen {\r\n\r\n  generator = new SimpleGen()\r\n\r\n  generate = (min, max, round, operators = Operator.values) => {\r\n    let answer = Random.integer(min, max)\r\n    let remain = answer\r\n\r\n    let leafNodes = []\r\n\r\n    let rootNode = new TreeFormula()\r\n    leafNodes.push({ node: rootNode, child: 0 }, { node: rootNode, child: 1 })\r\n\r\n    let currentNode = rootNode\r\n    for (let i = 0; i < round; i++) {\r\n      let selectedOperator = Random.select(operators)\r\n      \r\n      var formula\r\n      if (selectedOperator === Operator.ADD) {\r\n        formula = this.generator.generateAdd(remain, remain, min)\r\n      } else if (selectedOperator === Operator.MINUS) {\r\n        formula = this.generator.generateMinus(remain, remain, max)\r\n      } else if (selectedOperator === Operator.MULTIPLY) {\r\n        // for multiply we don't care the remaining answer\r\n        formula = this.generator.generateMultiply(min, max)\r\n      }\r\n\r\n      currentNode.formula = formula\r\n      let selectResult = Random.selectAndRemove(leafNodes)\r\n      let choseNode = selectResult.selected\r\n      leafNodes = selectResult.rest\r\n\r\n      let newNode = new TreeFormula()\r\n\r\n      if (choseNode.child === 0) {\r\n        choseNode.node.leftNode = newNode\r\n        remain = choseNode.node.formula.left\r\n      } else {\r\n        choseNode.node.rightNode = newNode\r\n        remain = choseNode.node.formula.right\r\n      }\r\n\r\n      currentNode = newNode\r\n      leafNodes.push({ node: newNode, child: 0 }, { node: newNode, child: 1 })\r\n    }\r\n\r\n    return rootNode\r\n  }\r\n}","import CompositeFormula from 'calgen/model/CompositeFormula';\r\nimport * as Operator from 'calgen/model/Operator';\r\nimport * as Random from 'calgen/util/Random.js';\r\nimport SimpleGen from './SimpleGen';\r\nimport SimpleFormula from 'calgen/model/SimpleFormula'\r\n\r\nexport default class DigitsBasedIteratedGen {\r\n\r\n  generator = new SimpleGen();\r\n\r\n  generate = (numberDigits, round, operators = Operator.values) => {\r\n    let answer;\r\n    let result = new CompositeFormula()\r\n\r\n    for (let i = 0; i < round; i++) {\r\n      let selectedOperator = Random.select(operators)\r\n      var formula\r\n      /* if (selectedOperator === Operator.ADD) {\r\n        formula = this.generator.generateAdd(remain, remain, min)\r\n      } else if (selectedOperator === Operator.MINUS) {\r\n        formula = this.generator.generateMinus(remain, remain, max)\r\n      } else */\r\n      if (selectedOperator === Operator.MULTIPLY) {\r\n        let left = i === 0 ? Random.integer(Math.pow(10, numberDigits[i] - 1), Math.pow(10, numberDigits[i])) : answer\r\n        let right = Random.integer(Math.pow(10, numberDigits[i + 1] - 1), Math.pow(10, numberDigits[i + 1]))\r\n        formula = new SimpleFormula(left, selectedOperator, right, selectedOperator.calc(left, right))\r\n        answer = selectedOperator.calc(left, right)\r\n      }\r\n      \r\n      result.answer = answer\r\n      result.push(formula)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n}\r\n","import * as Consts from 'calgen/calc/consts'\r\nimport IteratedGen from 'calgen/service/IteratedGen'\r\nimport TreeGen from 'calgen/service/TreeGen'\r\nimport DigitsBasedIteratedGen from 'calgen/service/DigitsBasedIteratedGen'\r\nimport * as Operator from 'calgen/model/Operator'\r\n\r\nexport const initSettingsFromLocationSearch = search => {\r\n  let kvarr = search.replace('?', '').split('&');\r\n  var newValue = {}\r\n  for (let i = 0; i < kvarr.length; i++) {\r\n    let temparr = kvarr[i].split('=');\r\n    if (temparr.length > 1) {\r\n      newValue[temparr[0]] = parseInt(temparr[1])\r\n    }\r\n  }\r\n  return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const updateSettings = (newValue) => {\r\n  return { type: Consts.UPDATE_SETTINGS, value: newValue }\r\n}\r\n\r\nexport const generateQuestions = (questionType, rangeMin, rangeMax, numberCount, numberDigits, count, blank, brackets) => {\r\n  const operators = Operator.fromQuestionType(questionType)\r\n\r\n  var generator\r\n  var formula\r\n\r\n  const questions = []\r\n  for (let i = 0; i < count; i++) {\r\n    let index = parseInt(i / 3)\r\n    if (i % 3 === 0) {\r\n      questions[index] = []\r\n    }\r\n\r\n    if ((questionType & 0x100) !== 0) {\r\n      generator = new DigitsBasedIteratedGen();\r\n      formula = generator.generate(numberDigits, numberCount - 1, operators).toDisplayString(blank)\r\n    } else {\r\n      generator = brackets === 1 ? new TreeGen() : new IteratedGen();\r\n      formula = generator.generate(rangeMin, rangeMax, numberCount - 1, operators).toDisplayString(blank)\r\n    }\r\n\r\n    questions[index].push(formula)\r\n  }\r\n  return { type: Consts.GENERATE_QUESTIONS, questions: questions }\r\n}\r\n\r\nexport const getQueryParamsUrl = params => {\r\n  const { questionType, rangeMin, rangeMax, numberCount, count, blank, brackets } = params\r\n  return `?questionType=${questionType}&rangeMin=${rangeMin}&rangeMax=${rangeMax}&numberCount=${numberCount}&count=${count}&blank=${blank}&brackets=${brackets}`\r\n}","import { FormControlLabel, FormLabel, Grid, MenuItem, Radio, RadioGroup, Switch, TextField, Typography } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as actions from 'calgen/calc/actions';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './HeaderView.css';\r\n\r\nfunction OnLoad() {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(actions.initSettingsFromLocationSearch(window.location.search))\r\n  }, [dispatch])\r\n  return null;\r\n}\r\n\r\nfunction HeaderView() {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const questionType = useSelector(state => state.calcReducer.questionType)\r\n  let rangeMin = useSelector(state => state.calcReducer.rangeMin)\r\n  rangeMin = isNaN(rangeMin) ? '' : rangeMin\r\n  let rangeMax = useSelector(state => state.calcReducer.rangeMax)\r\n  rangeMax = isNaN(rangeMax) ? '' : rangeMax\r\n  const numberCount = useSelector(state => state.calcReducer.numberCount)\r\n  const numberDigits = useSelector(state => state.calcReducer.numberDigits)\r\n  const count = useSelector(state => state.calcReducer.count)\r\n  const blank = useSelector(state => state.calcReducer.blank)\r\n  const brackets = useSelector(state => state.calcReducer.brackets)\r\n\r\n  const settings = {\r\n    questionType: questionType,\r\n    rangeMin: rangeMin,\r\n    rangeMax: rangeMax,\r\n    numberCount: numberCount,\r\n    numberDigits: numberDigits,\r\n    count: count,\r\n    blank: blank,\r\n    brackets: brackets\r\n  }\r\n\r\n  const labelProps = { item: true, xs: 2, container: true, direction: \"row\", justify: \"flex-end\" }\r\n  const fieldProps = { item: true, xs: 4, container: true, direction: \"row\", justify: \"flex-start\" }\r\n\r\n  const doUpdate = newVal => {\r\n    dispatch(actions.updateSettings(newVal))\r\n    history.push(actions.getQueryParamsUrl({ ...settings, ...newVal }))\r\n  }\r\n\r\n  return (\r\n    <Grid className=\"noprint\" container justify=\"center\">\r\n      <OnLoad />\r\n      <Grid container spacing={3} justify=\"center\" alignItems=\"center\" style={{ width: '90%' }}>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>题型</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps} xs={10}>\r\n          <RadioGroup row value={questionType} onChange={event => doUpdate({ questionType: parseInt(event.target.value) })}>\r\n            <FormControlLabel value={0x01} control={<Radio color=\"primary\" />} label=\"仅加法\" />\r\n            <FormControlLabel value={0x10} control={<Radio color=\"primary\" />} label=\"仅减法\" />\r\n            <FormControlLabel value={0x11} control={<Radio color=\"primary\" />} label=\"加法+减法\" />\r\n            <FormControlLabel value={0x100} control={<Radio color=\"primary\" />} label=\"乘法\" />\r\n          </RadioGroup>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>数字个数</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <Select value={numberCount} onChange={event => doUpdate({ numberCount: parseInt(event.target.value) })} >\r\n            <MenuItem value={2}>2 (a + b = z)</MenuItem>\r\n            <MenuItem value={3}>3 (a + b + c = z)</MenuItem>\r\n            <MenuItem value={4}>4 (a + b + c + d = z)</MenuItem>\r\n            <MenuItem value={5}>5 (a + b + c + d + e = z)</MenuItem>\r\n          </Select>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>题目数量</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={1} max={2000} value={count}\r\n            onChange={event => doUpdate({ count: Math.min(2000, parseInt(event.target.value) || 1) })} />\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>{(questionType & 0x1100) === 0 ? '数值范围' : '数字位数'}</FormLabel>\r\n        </Grid>\r\n        {(questionType & 0x1100) === 0 && <Grid {...fieldProps}>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={-100000} max={rangeMax - 1} value={rangeMin}\r\n            onChange={event => doUpdate({ rangeMin: parseInt(event.target.value) })} />\r\n          <span className=\"calc-range-char\">~</span>\r\n          <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n            min={rangeMin} max={100000} value={rangeMax}\r\n            onChange={event => doUpdate({ rangeMax: parseInt(event.target.value) })} />\r\n        </Grid>}\r\n        {/* including multiply and divide */}\r\n        {(questionType & 0x1100) !== 0 && <Grid {...fieldProps}>\r\n          {Array.from(Array(numberCount), (_e, i) => {\r\n            return <span key={`Key ${i}`} style={{ marginLeft: 20 }}>\r\n              <Typography>{`数字${i + 1}`}</Typography>\r\n              <TextField type=\"number\" InputLabelProps={{ shrink: true }} inputProps={{ style: { textAlign: 'right' } }} style={{ width: 50 }}\r\n                min={1} max={5} value={numberDigits[i]}\r\n                onChange={event => {\r\n                  let newNumberDigits = numberDigits.slice(0)\r\n                  newNumberDigits[i] = Math.min(5, parseInt(event.target.value) || 1)\r\n                  doUpdate({ numberDigits: newNumberDigits });\r\n                }} />\r\n            </span>\r\n          })\r\n          }\r\n        </Grid>}\r\n        <Grid {...labelProps}>\r\n          <FormLabel>填空位置</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <RadioGroup row value={blank} onChange={event => doUpdate({ blank: parseInt(event.target.value) })}>\r\n            <FormControlLabel value={1} control={<Radio color=\"primary\" />} label=\"仅右边\" />\r\n            <FormControlLabel value={2} control={<Radio color=\"primary\" />} label=\"仅左边\" />\r\n            <FormControlLabel value={3} control={<Radio color=\"primary\" />} label=\"两边\" />\r\n          </RadioGroup>\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n          <FormLabel>包含括号</FormLabel>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n          <FormControlLabel control={<Switch color=\"primary\" checked={brackets === 1} onChange={event => doUpdate({ brackets: event.target.checked ? 1 : 0 })} />} />\r\n        </Grid>\r\n        <Grid {...labelProps}>\r\n        </Grid>\r\n        <Grid {...fieldProps}>\r\n        </Grid>\r\n        <Grid item xs={12} container justify=\"center\">\r\n          <button className=\"gen-button\" onClick={() => dispatch(actions.generateQuestions(questionType, rangeMin, rangeMax, numberCount, numberDigits, count, blank, brackets))}>生成</button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default HeaderView","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionTitleView.css'\r\n\r\nfunction QuestionTitleView() {\r\n  const count = useSelector(state => state.calcReducer.count)\r\n\r\n  return (\r\n    <section className='question-title-cont'>\r\n      <h2>小学数学计算题&nbsp;&nbsp;(共{count}题）</h2>\r\n      <h3>\r\n        班级：<span className=\"question-title-underscore\" />\r\n        姓名：<span className=\"question-title-underscore\" />\r\n        学号：<span className=\"question-title-underscore\" />\r\n      </h3>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuestionTitleView\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './QuestionView.css'\r\n\r\nfunction QuestionView() {\r\n  const questions = useSelector(state => state.calcReducer.questions)\r\n\r\n  return (\r\n    <section className='question-cont'>\r\n      <table className='question-table'>\r\n        <tbody>\r\n          {questions && questions.map(q =>\r\n            <tr key={q[0] + q[1] + q[2]} className='question-table-tr'>\r\n              <td className='question-table-td'>{q[0]}</td>\r\n              <td className='question-table-td'>{q[1]}</td>\r\n              <td className='question-table-td'>{q[2]}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuestionView\r\n","import * as actions from 'calgen/calc/actions';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './QuickBarView.css';\r\n\r\nfunction QuickBarView() {\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const buttons = [\r\n    { label: \"10以内加法\", options: { questionType: 1, rangeMin: 0, rangeMax: 10, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"10以内减法\", options: { questionType: 16, rangeMin: 0, rangeMax: 10, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加法\", options: { questionType: 1, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内减法\", options: { questionType: 16, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加减法\", options: { questionType: 17, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"20以内加减法(两边）\", options: { questionType: 17, rangeMin: 0, rangeMax: 20, numberCount: 2, count: 50, blank: 3, brackets: 0 } },\r\n    { label: \"100以内加减法\", options: { questionType: 17, rangeMin: 0, rangeMax: 100, numberCount: 2, count: 50, blank: 1, brackets: 0 } },\r\n    { label: \"100以内加减法(两边）\", options: { questionType: 17, rangeMin: 0, rangeMax: 100, numberCount: 2, count: 50, blank: 3, brackets: 0 } }\r\n  ]\r\n  return (\r\n    <section className='quickbar-cont noprint'>\r\n      {buttons.map(b =>\r\n        <button key={b.label} className='quickbar-btn' onClick={() => {\r\n          dispatch(actions.updateSettings(b.options))\r\n          history.push(actions.getQueryParamsUrl(b.options))\r\n          dispatch(actions.generateQuestions(b.options.questionType, b.options.rangeMin, b.options.rangeMax,\r\n            b.options.numberCount, b.options.numberDigits, b.options.count, b.options.blank, b.options.brackets))\r\n        }}>{b.label}</button>\r\n      )}\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default QuickBarView\r\n","import Paper from '@material-ui/core/Paper';\r\nimport HeaderView from 'calgen/calc/view/HeaderView';\r\nimport QuestionTitleView from 'calgen/calc/view/QuestionTitleView';\r\nimport QuestionView from 'calgen/calc/view/QuestionView';\r\nimport QuickBarView from 'calgen/calc/view/QuickBarView';\r\nimport React from 'react';\r\n\r\nfunction CalcIndexView() {\r\n\r\n  return (\r\n    <div>\r\n      <HeaderView />\r\n      <QuickBarView />\r\n      <Paper className=\"question-pager\">\r\n        <QuestionTitleView />\r\n        <QuestionView />\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalcIndexView","import { Button } from '@material-ui/core';\r\nimport * as Random from 'calgen/util/Random';\r\nimport React, { useState } from 'react';\r\n\r\nfunction CalcMultiIndexView() {\r\n  const [left, setLeft] = useState(0)\r\n  const [right, setRight] = useState(0)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n        setLeft(Random.integer(0, 10))\r\n        setRight(Random.integer(0, 10))\r\n      }}>下一题</Button>\r\n      <div className=\"temp-123\">\r\n        <span>{left}</span>\r\n        <span>&nbsp;x&nbsp;</span>\r\n        <span>{right}</span>\r\n        <span>=</span>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalcMultiIndexView","\r\nimport CalcIndexView from 'calgen/calc/index';\r\nimport CalcMultiIndexView from 'calgen/calc-multi/index'\r\nimport * as Consts from 'calgen/layout/consts';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction LayoutContentView() {\r\n\r\n  const selectedTab = useSelector(state => state.layoutReducers.selectedTab)\r\n\r\n  return (\r\n    <section>\r\n      {selectedTab === Consts.TAB_ADDMINUS && <CalcIndexView />}\r\n      {selectedTab === Consts.TAB_MULTIPLY && <CalcMultiIndexView />}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default LayoutContentView\r\n","import { Tabs, Tab } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport React from 'react';\r\nimport './LayoutHeaderView.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { switchTab } from 'calgen/layout/actions'\r\nimport * as Consts from 'calgen/layout/consts'\r\n\r\nfunction LayoutHeaderView() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const selectedTab = useSelector(state => state.layoutReducers.selectedTab)\r\n\r\n  const handleChange = (_event, newValue) => {\r\n    dispatch(switchTab(newValue))\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"noprint\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Tabs value={selectedTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n          <Tab label=\"加减法\" value={Consts.TAB_ADDMINUS} />\r\n          <Tab label=\"乘法\" value={Consts.TAB_MULTIPLY} />\r\n        </Tabs>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default LayoutHeaderView\r\n\r\n\r\n\r\n","import * as Consts from 'calgen/layout/consts'\r\n\r\nexport const switchTab = (newTabValue) => {\r\n  return { type: Consts.LAYOUT_SWITCH_TAB, value: newTabValue }\r\n}","import { Container } from '@material-ui/core';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport reducer from 'calgen/app/reducers';\r\nimport LayoutContentView from 'calgen/layout/view/LayoutContentView';\r\nimport LayoutHeaderView from 'calgen/layout/view/LayoutHeaderView';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport './App.css';\r\n\r\n\r\nconst logger = createLogger({});\r\n\r\nconst store = createStore(reducer, applyMiddleware(logger))\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <CssBaseline />\r\n          <LayoutHeaderView />\r\n          <Container maxWidth=\"lg\" className=\"main-cont\">\r\n            <Typography variant=\"h4\" component=\"h1\" align=\"center\">小学数学计算题生成器</Typography>\r\n            <LayoutContentView />\r\n          </Container>\r\n        </div>\r\n      </Provider>\r\n    </Router >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}